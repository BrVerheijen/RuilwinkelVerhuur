@namespace RuilwinkelVerhuur.Models.Classes
@model IEnumerable<RuilwinkelVerhuur.Models.Classes.Factuur>


@{

    var catlist = new List<string> { "Elektronica", "Meubilair", "Kleren", "Curiosa" };
    var productlisttemp = ProductComm.retrieveList();
    var productlist = new List<Product> { };
    int highestID = 0;
    foreach (var item in Model)
    {
        if (item.ID > highestID)
        {
            highestID = item.ID;            
        }
    }

    highestID++;
    foreach (var i in ViewBag.cart)
    {
        foreach (var j in productlisttemp)
        {
            if (i == j.ID)
            {
                productlist.Add(j);
            }
        }
    }

    int totaalkost = 0;
}

<h2> @highestID</h2>
<div class="text-center">
    <div class="row justify-content-start ">
        <div class="col"> <img class="irc_mi img-fluid cursor-pointer " src="https://www.ruilwinkelvaals.nl/ruilwinkelvaals.nl/images/ruilwinkel/logo_ruilwinkel_vaalsWEB.jpg" width="70" height="70"> </div>
    </div>
    <h1 class="display-4">Mijn Winkelmandje</h1>
    <table class="table">
        <thead>
            <tr>
                <th>
                    Naam
                </th>
                <th>
                    Afbeelding
                </th>
                <th>
                    Prijs
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>

            @foreach (var product in productlist)
            {
                <tr>

                    @{totaalkost = totaalkost + product.Cost;}
                    <td>
                        @Html.DisplayFor(modelItem => product.Name)
                    </td>
                    <td>
                        <img src="@product.Picture" height="150" />
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => product.Cost)
                    </td>
                    <td>
                        <form action="@Url.Action("CheckoutPage", "Home")" onSubmit="if (!DeleteCart()) { return false; }">
                            <input type="submit" value="Delete" />
                        </form>
                        <script>
                            function DeleteCart()
                            {
                                var txt;
                                var r = confirm("Weet u zeker dat u dit item wilt verwijderen?");
                                if (r == true) {
                                    @{ 
                                        List<int> cartnow = SessionHelper.GetObjectFromJson<List<int>>(Context.Session, "cart");
                                        cartnow.Remove(product.ID);
                                        SessionHelper.SetObjectAsJson(Context.Session, "cart", cartnow);

                                    }
                                    txt = "Succesvol verwijderd";

                                }
                                return r


                            }
                        </script>
                    </td>
                </tr>
                                        }
        </tbody>
    </table>

    <p class="mb-1"><b>Totaalprijs: @totaalkost</b></p>


    <div class="row mb-5 mt-4 ">
        <div class="col-md-7 col-lg-6 mx-auto">
            <form action="@Url.Action("OrderPage", "Home", new { id = highestID})" onSubmit="if(!confirm('Weet u zeker dat u de bestelling wilt afronden?')){return false;}">
                <input type="submit" value="Checkout" />
            </form>
                <script>
                    function CheckOut() {
                        var txt;
                        var confirmer = false;
                        var s = confirm("Weet u zeker dat u de bestelling wilt afronden?");
                        if (s == true) {

                        @{ 
                            User user = SessionHelper.GetObjectFromJson<User>(Context.Session, "user");
                            List<int> cart;
                            if (SessionHelper.GetObjectFromJson<List<int>>(Context.Session, "cart") == null)
                            {
                                cart = new List<int>();
                                SessionHelper.SetObjectAsJson(Context.Session, "cart", cart);
                            }
                            else
                            {
                                cart = SessionHelper.GetObjectFromJson<List<int>>(Context.Session, "cart");
                                SessionHelper.SetObjectAsJson(Context.Session, "cart", cart);
                            }

                            var csconfirmer = false;

                            if (ProductComm.CheckCartAvailable(cart) && PuntenComm.SubstractPoints(user.WalletID, 0))
                            {
                                ProductComm.SetProductsUnavailable(cart);
                                csconfirmer = true;
                                Factuur factuur = new Factuur { UserID = user.ID, Date = 8787 };
                                if (ModelState.IsValid)
                                {
                                    _context.Add(factuur);
                                    _context.SaveChangesAsync();

                                    foreach (int productID in cart)
                                    {
                                        ProductNaarFactuur productNaarFactuur = new ProductNaarFactuur { FactuurID = id, ProductID = productID, HuurLengte = 7, StartDate = "10/06/2021" };
                                        _context.Add(productNaarFactuur);
                                        _context.SaveChangesAsync();
                                    }

                                    Emailer.FactuurGenerator(cart, factuur, user);

                                    cart = new List<int>();
                                    SessionHelper.SetObjectAsJson(Context.Session, "cart", cart);

                                    //return RedirectToAction(nameof(Index));
                                }
                            }
                        }
                        }

                        if (@csconfirmer == true) {
                            alert("De bestelling is succesvol afgerond!")
                        }
                        else if (@csconfirmer == false) {
                            alert("Er zijn niet beschikbare producten óf u heeft niet genoeg punten!")
                        }

                            confirmer = @csconfirmer;


                        return confirmer


                    }
                </script>
        </div>
    </div>
</div>
